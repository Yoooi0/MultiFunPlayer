<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:controls="clr-namespace:MultiFunPlayer.UI.Controls"
                    xmlns:behaviours="clr-namespace:MultiFunPlayer.UI.Behaviours"
                    xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <material:NotConverter x:Key="NotConverter"/>

    <SolidColorBrush x:Key="MaterialDesignErrorBrush" Color="{DynamicResource MaterialDesignErrorColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignPendingBrush" Color="{DynamicResource MaterialDesignPendingColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignWarningBrush" Color="{DynamicResource MaterialDesignWarningColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignSuccessBrush" Color="{DynamicResource MaterialDesignSuccessColor}" po:Freeze="True" />

    <SolidColorBrush x:Key="MaterialDesignLightErrorBrush" Color="{DynamicResource MaterialDesignLightErrorColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignLightPendingBrush" Color="{DynamicResource MaterialDesignLightPendingColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignLightWarningBrush" Color="{DynamicResource MaterialDesignLightWarningColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignLightSuccessBrush" Color="{DynamicResource MaterialDesignLightSuccessColor}" po:Freeze="True" />

    <SolidColorBrush x:Key="MaterialDesignPrimaryCheckerboxBrush" Color="{DynamicResource MaterialDesignPrimaryCheckerboxColor}" po:Freeze="True" />
    <SolidColorBrush x:Key="MaterialDesignSecondaryCheckerboxBrush" Color="{DynamicResource MaterialDesignSecondaryCheckerboxColor}" po:Freeze="True" />

    <Style TargetType="{x:Type TextBlock}" x:Key="ConnectionStatusTextBlock">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Status}" Value="Connected">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignSuccessBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="Disconnected">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignErrorBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="Connecting">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignPendingBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Status}" Value="Disconnecting">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignPendingBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ButtonBase}" x:Key="MaterialDesignProgressToolBarButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:TransitionAssist.DisableTransitions" Value="True"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="material:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
        <Setter Property="material:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="material:ButtonProgressAssist.Opacity" Value=".4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                                <ProgressBar x:Name="ProgressBar"
                                             Style="{DynamicResource MaterialDesignLinearProgressBar}"
                                             Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Minimum)}"
                                             Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Maximum)}"
                                             Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IndicatorForeground)}"
                                             Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IndicatorBackground)}"
                                             Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Value)}"
                                             IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IsIndeterminate)}"
                                             Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                             Height="{TemplateBinding Height}"
                                             Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                             Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Opacity)}"
                                             HorizontalAlignment="Left"
                                             VerticalAlignment="Center">
                                </ProgressBar>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple Content="{TemplateBinding Content}" 
                                         ContentTemplate="{TemplateBinding ContentTemplate}" 
                                         Focusable="False"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Padding="{TemplateBinding Padding}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarPopupBox" TargetType="material:PopupBox" BasedOn="{StaticResource MaterialDesignPopupBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignPopupBoxToggleContent}" />
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="PopupHorizontalOffset" Value="5"/>
        <Setter Property="PopupVerticalOffset" Value="5"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="Width" Value="36" />
        <Setter Property="Height" Value="36" />
        <Setter Property="Padding" Value="0 8 0 8" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ToolTipService.IsEnabled" Value="{Binding IsPopupOpen, RelativeSource={RelativeSource Self}, Converter={StaticResource NotConverter}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type material:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="Separator" BasedOn="{StaticResource MaterialDesignSeparator}"/>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <material:Ripple Content="{TemplateBinding Content}" 
                                                         ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                         Focusable="False"
                                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                         Padding="{TemplateBinding Padding}"
                                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <material:Ripple.Clip>
                                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                                    <Binding ElementName="border" Path="ActualWidth" />
                                                    <Binding ElementName="border" Path="ActualHeight" />
                                                    <Binding ElementName="border" Path="CornerRadius" />
                                                    <Binding ElementName="border" Path="BorderThickness" />
                                                </MultiBinding>
                                            </material:Ripple.Clip>
                                        </material:Ripple>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                            </Grid>
                        </AdornerDecorator>
                        <ToggleButton x:Name="PART_Toggle" 
                                      Style="{StaticResource ToggleButtonStyle}" 
                                      Foreground="{DynamicResource MaterialDesignBody}"
                                      FocusVisualStyle="{x:Null}"
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                      Cursor="Hand" 
                                      TabIndex="{TemplateBinding TabIndex}" 
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Width="{TemplateBinding Width}" 
                                      Height="{TemplateBinding Height}"
                                      IsTabStop="{TemplateBinding IsTabStop}">
                            <ContentPresenter Content="{TemplateBinding ToggleContent}" 
                                              ContentTemplate="{TemplateBinding ToggleContentTemplate}"/>
                        </ToggleButton>
                        <material:PopupEx x:Name="PART_Popup" 
                                            IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                            HorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupHorizontalOffset}"
                                            VerticalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupVerticalOffset}"
                                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                                            Placement="Custom"
                                            PopupAnimation="Fade"
                                            AllowsTransparency="True">
                            <material:Card Content="{TemplateBinding PopupContent}" 
                                           ContentTemplate="{TemplateBinding PopupContentTemplate}"
                                           Foreground="{DynamicResource MaterialDesignBody}"
                                           Padding="{TemplateBinding Padding}"
                                           RenderOptions.ClearTypeHint="Enabled"
                                           material:ShadowAssist.ShadowDepth="{TemplateBinding material:ShadowAssist.ShadowDepth}"
                                           Margin="5">
                                <material:Card.Resources>
                                    <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignPopupBoxButton}" />
                                </material:Card.Resources>
                            </material:Card>
                        </material:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="MaterialDesignToolBarToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple x:Name="ContentPresenter" 
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}" 
                                         Focusable="False"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Padding="{TemplateBinding Padding}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="material:ToggleButtonAssist.HasOnContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContent)}" />
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContentTemplate)}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarRotatingToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <AdornerDecorator>
                            <Grid>
                                <Border Background="Transparent" 
                                        CornerRadius="3"
                                        x:Name="border"/>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple x:Name="ContentPresenter" 
                                         ContentTemplate="{TemplateBinding ContentTemplate}" 
                                         Focusable="False"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Padding="{TemplateBinding Padding}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Content>
                                <ContentControl Content="{TemplateBinding Content}"
                                                RenderTransformOrigin="0.5 0.5">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform x:Name="ExpandPathRotateTransform"/>
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </material:Ripple.Content>
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="material:ToggleButtonAssist.HasOnContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContent)}" />
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContentTemplate)}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid ClipToBounds="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel IsItemsHost="True"
                                  Grid.Row="0"
                                  Panel.ZIndex="100" 
                                  Background="{DynamicResource MaterialDesignToolBarBackground}">
                            <TabPanel.Effect>
                                <DropShadowEffect ShadowDepth="0" Direction="270" po:Freeze="True"/>
                            </TabPanel.Effect>
                        </TabPanel>
                        
                        <ContentPresenter Panel.ZIndex="0" Grid.Row="1" ContentSource="SelectedContent" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="border" 
                            Background="{DynamicResource MaterialDesignLightForeground}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            SnapsToDevicePixels="True" 
                            BorderThickness="0"
                            CornerRadius="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignSelection}"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Height" Value="4"/>
        <Setter Property="MinHeight" Value="4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Opacity="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                            <ColumnDefinition Width="0.00001*"/>
                            <ColumnDefinition Width="Auto" MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                        </Grid.ColumnDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1"/>

                        <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource MaterialDesignRepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource MaterialDesignRepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignSelection}"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="Width" Value="4"/>
        <Setter Property="MinWidth" Value="4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Opacity="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition Height="Auto" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Row="1"/>

                        <Track x:Name="PART_Track" Grid.Row="1" IsEnabled="{TemplateBinding IsMouseOver}" IsDirectionReversed="True">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource MaterialDesignRepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource MaterialDesignRepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NonReloadingTabControlScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Style="{StaticResource HorizontalScrollBar}"
                                   Opacity="0.36"
                                   VerticalAlignment="Top"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   IsHitTestVisible="True"
                                   Height="4"
                                   MinHeight="4"
                                   ViewportSize="{TemplateBinding ScrollableWidth, Converter={StaticResource DivisionMathConverter}, ConverterParameter=3}"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.15" 
                                                         Storyboard.TargetName="PART_HorizontalScrollBar"
                                                         Storyboard.TargetProperty="Opacity" To="0.36" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.15" 
                                                         Storyboard.TargetName="PART_HorizontalScrollBar"
                                                         Storyboard.TargetProperty="Opacity" To="0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Style="{StaticResource VerticalScrollBar}"
                                   Opacity="0.36"
                                   HorizontalAlignment="Right"
                                   Orientation="Vertical"
                                   Grid.Column="1"
                                   IsHitTestVisible="True"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Width="7"
                                   MinWidth="7"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Margin="0 0 1 0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:NonReloadingTabControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NonReloadingTabControl}">
                    <Grid ClipToBounds="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <DockPanel Grid.Row="0"
                                   Panel.ZIndex="100"
                                   Background="{DynamicResource MaterialDesignToolBarBackground}">
                            <DockPanel.Effect>
                                <DropShadowEffect ShadowDepth="0" Direction="270" po:Freeze="True"/>
                            </DockPanel.Effect>

                            <ContentPresenter ContentTemplate="{TemplateBinding AdditionalPanelContent}"
                                              DockPanel.Dock="Right"/>

                            <ScrollViewer x:Name="PART_ScrollViewer"
                                          HorizontalScrollBarVisibility="Auto"
                                          VerticalScrollBarVisibility="Hidden"
                                          HorizontalAlignment="Left"
                                          Style="{StaticResource NonReloadingTabControlScrollViewer}">
                                <TabPanel x:Name="PART_TabPanel"
                                          IsItemsHost="True"
                                          DockPanel.Dock="Left"
                                          HorizontalAlignment="Left"/>
                            </ScrollViewer>
                        </DockPanel>

                        <Grid x:Name="PART_ItemsHolder"
                              Margin="0"
                              Grid.Row="1"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="36" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Root">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" From="0" To="1" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_BackgroundSelection" To="0.12" BeginTime="0:0:0.2" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_BackgroundSelection" To="0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <material:ColorZone Grid.RowSpan="2" x:Name="tabitemcz"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Focusable="False"
                                            Background="{x:Null}">
                            <material:Ripple Focusable="False"
                                                Content="{TemplateBinding Header}" 
                                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                HorizontalContentAlignment="Center"
                                                VerticalContentAlignment="Center"
                                                RecognizesAccessKey="True"
                                                x:Name="contentPresenter"
                                                Opacity=".82"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                Padding="{TemplateBinding Padding}"
                                                TextBlock.FontWeight="Bold"
                                                TextBlock.FontSize="14"
                                                TextOptions.TextFormattingMode="Ideal" 
                                                TextOptions.TextRenderingMode="Auto">
                            </material:Ripple>
                        </material:ColorZone>
                        <Border x:Name="SelectionHighlightBorder" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0 0 0 2"
                                Visibility="Hidden" RenderTransformOrigin="0.5 0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="1" />
                            </Border.RenderTransform>
                            <Rectangle x:Name="PART_BackgroundSelection" Fill="{TemplateBinding Background}" Opacity="0.12" IsHitTestVisible="False"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.38"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1"/>
                            <Setter TargetName="SelectionHighlightBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type MenuItem}" x:Key="MaterialDesignToolBarMenuItem" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignToolBarBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid ClipToBounds="True">
                        <Border x:Name="templateRoot"
                                CornerRadius="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"/>
                        <Border x:Name="BackgroundRoot"
                                CornerRadius="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                SnapsToDevicePixels="True"
                                Opacity="0"/>
                        <material:Ripple Background="Transparent"
                                         HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                         Focusable="False"
                                         Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}">
                            <ContentPresenter x:Name="Icon"
                                              Content="{TemplateBinding Icon}"
                                              ContentSource="Icon"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </material:Ripple>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="Fade"
                               Placement="Bottom"
                               CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(material:ShadowAssist.CacheMode)}">
                            <Border x:Name="SubMenuBorder"
                                    Background="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuBase}}"
                                    Effect="{DynamicResource MaterialDesignShadowDepth1}"
                                    CornerRadius="2">

                                <Border Background="Transparent">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled" Margin="0 16">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect"
                                                           Fill="{Binding Background, ElementName=SubMenuBorder}"
                                                           Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                           Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                            Grid.IsSharedSizeScope="True"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter TargetName="SubMenuBorder" Property="Margin" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="BackgroundRoot" Property="Opacity" Value="0.13"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarExpander" TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="material:ExpanderAssist.HeaderBackground" Value="Transparent" />
        <Setter Property="ExpandDirection" Value="Down"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Expanded">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                             Storyboard.TargetName="ContentPanel" 
                                                             From="0" To="1"
                                                             Duration="{StaticResource ExpandDuration}"/>
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                             From="0" To="1"
                                                             Duration="{StaticResource ExpandDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>

                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentSite" 
                                                                           Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                           Duration="{StaticResource ExpandDuration}">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                                <DiscreteObjectKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="{x:Static Visibility.Visible}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>

                                    <VisualTransition To="Collapsed">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                             Storyboard.TargetName="ContentPanel" 
                                                             From="1" To="0" 
                                                             Duration="{StaticResource CollapseDuration}"/>
                                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                             From="1" To="0"
                                                             Duration="{StaticResource CollapseDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>

                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentSite" 
                                                                           Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                           Duration="{StaticResource CollapseDuration}">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                                <DiscreteObjectKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="{x:Static Visibility.Collapsed}"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="ContentPanel" 
                                                         To="1" 
                                                         Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform" 
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)" 
                                                         To="1" 
                                                         Duration="0" />

                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentSite" 
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                       Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="ContentPanel"
                                                         To="0"
                                                         Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="0"
                                                         Duration="0" />

                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentSite" 
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                       Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <DockPanel Background="{TemplateBinding Background}">
                            <DockPanel DockPanel.Dock="Top"
                                       LastChildFill="True">
                                <ToggleButton Name="HeaderSite"
                                              Focusable="False"
                                              IsTabStop="False"
                                              DockPanel.Dock="Right"
                                              BorderThickness="0" Cursor="Hand"
                                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              TextElement.FontSize="{TemplateBinding material:ExpanderAssist.HeaderFontSize}"
                                              Opacity="0.87"
                                              Foreground="{TemplateBinding Foreground}"
                                              Background="{TemplateBinding material:ExpanderAssist.HeaderBackground}">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Background" Value="Transparent"/>

                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Background="{TemplateBinding Background}" 
                                                                Padding="0">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="36"/>
                                                                </Grid.ColumnDefinitions>

                                                                <ContentPresenter Grid.Column="0"
                                                                                  VerticalAlignment="Center"
                                                                                  Content="{TemplateBinding Content}"
                                                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>

                                                                <ToggleButton x:Name="ExpanderButton"
                                                                              Grid.Column="1"
                                                                              VerticalAlignment="Center"
                                                                              RenderTransformOrigin="0.5 0.5"
                                                                              HorizontalAlignment="Center"
                                                                              Height="36"
                                                                              Foreground="{TemplateBinding Foreground}"
                                                                              IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                                                    <ToggleButton.Style>
                                                                        <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignToolBarRotatingToggleButton}">
                                                                            <Setter Property="Content">
                                                                                <Setter.Value>
                                                                                    <material:PackIcon x:Name="ExpandPath" 
                                                                                                       Kind="ChevronDown"
                                                                                                       Opacity="0.38" Height="36" Width="24"
                                                                                                       VerticalAlignment="Center"
                                                                                                       HorizontalAlignment="Center"
                                                                                                       Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                                                                                       RenderTransformOrigin="0.5 0.5">
                                                                                        <material:PackIcon.RenderTransform>
                                                                                            <RotateTransform x:Name="ExpandPathRotateTransform"/>
                                                                                        </material:PackIcon.RenderTransform>
                                                                                    </material:PackIcon>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                            <Setter Property="ToolTip" Value="Open"/>
                                                                            <Style.Triggers>
                                                                                <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="True">
                                                                                    <Setter Property="ToolTip" Value="Close"/>
                                                                                </DataTrigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </ToggleButton.Style>
                                                                </ToggleButton>

                                                            </Grid>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>

                                <ContentControl Content="{TemplateBinding Header}"
                                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                DockPanel.Dock="Left"/>
                            </DockPanel>


                            <Border Name="ContentSite"
                                    Visibility="Collapsed">
                                <Border.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentSiteScaleTransform" />
                                    </TransformGroup>
                                </Border.LayoutTransform>

                                <Grid Name="ContentPanel"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                    <Border Background="{DynamicResource MaterialDesignCardBackground}"
                                            BorderThickness="0 1 0 0"
                                            BorderBrush="{DynamicResource PrimaryHueLightBrush}">
                                        <ContentPresenter Name="PART_Content" Focusable="False"
                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                                    </Border>
                                </Grid>
                            </Border>

                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignReversedSlider" TargetType="{x:Type Slider}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True"
                            UseLayoutRounding="True">
                        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
                            <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                            <Rectangle Grid.Row="1" Fill="{TemplateBinding Foreground}" Height="4" Opacity="0.38" VerticalAlignment="Center" RadiusX="2" RadiusY="2" />
                            <Border x:Name="activeTrack"
                                    Grid.Row="1"
                                    Background="{TemplateBinding Foreground}"
                                    CornerRadius="0,3,3,0"
                                    Height="6"
                                    Width="{Binding IncreaseRepeatButton.ActualWidth, ElementName=PART_Track}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center" />
                            <Canvas Grid.Row="1" VerticalAlignment="Center" Height="6">
                                <Rectangle x:Name="PART_SelectionRange" 
                                           Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" 
                                           Height="6" 
                                           RadiusX="2" 
                                           RadiusY="2" 
                                           Visibility="Collapsed" />
                            </Canvas>
                            <Track x:Name="PART_Track" Grid.Row="1" Height="20">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource MaterialDesignRepeatButton}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource MaterialDesignRepeatButton}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Template="{StaticResource MaterialDesignSliderThumb}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Foreground="{TemplateBinding Foreground}" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsSelectionRangeEnabled" Value="true">
                            <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsDirectionReversed" Value="True">
                            <Setter TargetName="activeTrack" Property="CornerRadius" Value="3,0,0,3" />
                            <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Left" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialDesignCompactRangeSliderThumb"
           BasedOn="{StaticResource MahApps.Styles.Thumb.Slider}"
           TargetType="Thumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ShowFocusVisualStoryboard">
                            <DoubleAnimation Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity" To="0.15" Duration="0" />
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <SineEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <SineEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HideFocusVisualStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.15" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <SineEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="thumbGrid" 
                          Height="14"
                          Width="12">
                        <Ellipse x:Name="halo"
                                 IsHitTestVisible="False"
                                 Width="30"
                                 Height="30"
                                 Margin="-15"
                                 Fill="{TemplateBinding Foreground}"
                                 Opacity="0" />
                        <Ellipse x:Name="focusedHalo"
                                 IsHitTestVisible="False"
                                 Width="30"
                                 Height="30"
                                 Margin="-15"
                                 Fill="{TemplateBinding Foreground}"
                                 Opacity="0.15"
                                 RenderTransformOrigin="0.5,0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="0" />
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <AdornerDecorator>
                            <AdornerDecorator.CacheMode>
                                <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </AdornerDecorator.CacheMode>
                            <Ellipse x:Name="grip"
                                     Fill="{TemplateBinding Foreground}"
                                     Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=RangeBase}, Path=(material:ShadowAssist.ShadowDepth), Converter={x:Static material:ShadowConverter.Instance}}"
                                     Margin="-1,0" />
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=RangeBase}}" Value="{x:Static Orientation.Vertical}">
                            <Setter TargetName="thumbGrid" Property="Height" Value="12" />
                            <Setter TargetName="thumbGrid" Property="Width" Value="14" />
                            <Setter TargetName="grip" Property="Margin" Value="0,-1" />
                        </DataTrigger>

                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource booleanOrConverter}">
                                    <Binding Path="IsMouseOver" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="Children[2].IsMouseOver" RelativeSource="{RelativeSource AncestorType={x:Type StackPanel}}"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0.15" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>

                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource booleanOrConverter}">
                                    <Binding Path="IsDragging" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="Children[2].IsDragging" RelativeSource="{RelativeSource AncestorType={x:Type StackPanel}}"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignCompactRangeSliderHorizontalMiddleThumb"
           BasedOn="{StaticResource MahApps.Styles.MetroThumb.RangeSlider.Horizontal.Middle}"
           TargetType="{x:Type metro:MetroThumb}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type metro:MetroThumb}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Height="4" Margin="-2 0" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignCompactRangeSliderVerticalMiddleThumb"
           BasedOn="{StaticResource MaterialDesignCompactRangeSliderHorizontalMiddleThumb}"
           TargetType="{x:Type metro:MetroThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type metro:MetroThumb}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Width="4" Margin="0 -2" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignCompactRangeSliderHorizontalTrack"
           BasedOn="{StaticResource MahApps.Styles.RepeatButton.Slider.HorizontalTrack}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Height="3" Opacity="0.38" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignCompactRangeSliderVerticalTrack"
           BasedOn="{StaticResource MaterialDesignCompactRangeSliderHorizontalTrack}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Width="3" Opacity="0.38" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MaterialDesignCompactRangeSliderHorizontal"
                     TargetType="metro:RangeSlider">
        <Grid x:Name="PART_Container"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" MinHeight="{TemplateBinding metro:RangeSlider.MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <StackPanel x:Name="PART_RangeSliderContainer"
                        Grid.Row="1"
                        Background="Transparent"
                        Orientation="Horizontal">
                <RepeatButton x:Name="PART_LeftEdge"
                              Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillBrush)}"
                              Style="{DynamicResource MaterialDesignCompactRangeSliderHorizontalTrack}" />

                <metro:MetroThumb x:Name="PART_LeftThumb"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillBrush)}"
                                  Cursor="Arrow"
                                  Style="{DynamicResource MaterialDesignCompactRangeSliderThumb}" />
                <metro:MetroThumb x:Name="PART_MiddleThumb"
                                  MinWidth="{TemplateBinding MinRangeWidth}"
                                  Cursor="Hand"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillBrush)}"
                                  Style="{DynamicResource MaterialDesignCompactRangeSliderHorizontalMiddleThumb}" />
                <metro:MetroThumb x:Name="PART_RightThumb"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillBrush)}"
                                  Cursor="Arrow"
                                  Style="{DynamicResource MaterialDesignCompactRangeSliderThumb}" />

                <RepeatButton x:Name="PART_RightEdge"
                              Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillBrush)}"
                              Style="{DynamicResource MaterialDesignCompactRangeSliderHorizontalTrack}" />
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillHoverBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillHoverBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillHoverBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillHoverBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillHoverBrush)}" />
            </Trigger>
            <Trigger SourceName="PART_LeftEdge" Property="IsPressed" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="PART_RightEdge" Property="IsPressed" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="PART_MiddleThumb" Property="IsDragging" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillDisabledBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillDisabledBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillDisabledBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillDisabledBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillDisabledBrush)}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MaterialDesignCompactRangeSliderVertical"
                     TargetType="metro:RangeSlider">
        <Grid x:Name="PART_Container"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" MinWidth="{TemplateBinding metro:RangeSlider.MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <StackPanel x:Name="PART_RangeSliderContainer"
                        Grid.Column="1"
                        Background="Transparent"
                        Orientation="Vertical">
                <RepeatButton x:Name="PART_RightEdge"
                              Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillBrush)}"
                              Style="{DynamicResource MaterialDesignCompactRangeSliderVerticalTrack}" />

                <metro:MetroThumb x:Name="PART_RightThumb"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillBrush)}"
                                  Cursor="Arrow"
                                  Style="{DynamicResource MaterialDesignCompactRangeSliderThumb}" />
                <metro:MetroThumb x:Name="PART_MiddleThumb"
                                  MinHeight="{TemplateBinding MinRangeWidth}"
                                  Cursor="Hand"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillBrush)}"
                                  Style="{DynamicResource MaterialDesignCompactRangeSliderVerticalMiddleThumb}" />
                <metro:MetroThumb x:Name="PART_LeftThumb"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillBrush)}"
                                  Cursor="Arrow"
                                  Style="{DynamicResource MaterialDesignCompactRangeSliderThumb}" />

                <RepeatButton x:Name="PART_LeftEdge"
                              Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillBrush)}"
                              Style="{DynamicResource MaterialDesignCompactRangeSliderVerticalTrack}" />
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillHoverBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillHoverBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillHoverBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillHoverBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillHoverBrush)}" />
            </Trigger>
            <Trigger SourceName="PART_LeftEdge" Property="IsPressed" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="PART_RightEdge" Property="IsPressed" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="PART_MiddleThumb" Property="IsDragging" Value="True">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillPressedBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillPressedBrush)}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_LeftEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillDisabledBrush)}" />
                <Setter TargetName="PART_LeftThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillDisabledBrush)}" />
                <Setter TargetName="PART_MiddleThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackValueFillDisabledBrush)}" />
                <Setter TargetName="PART_RightEdge" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.TrackFillDisabledBrush)}" />
                <Setter TargetName="PART_RightThumb" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metro:SliderHelper.ThumbFillDisabledBrush)}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type metro:RangeSlider}" x:Key="MaterialDesignCompactRangeSlider">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="6 0" />
        <Setter Property="metro:SliderHelper.ThumbFillBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.ThumbFillDisabledBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
        <Setter Property="metro:SliderHelper.ThumbFillHoverBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.ThumbFillPressedBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.TrackFillBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.TrackFillDisabledBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
        <Setter Property="metro:SliderHelper.TrackFillHoverBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.TrackFillPressedBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.TrackValueFillBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.TrackValueFillDisabledBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
        <Setter Property="metro:SliderHelper.TrackValueFillHoverBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="metro:SliderHelper.TrackValueFillPressedBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="material:SliderAssist.OnlyShowFocusVisualWhileDragging" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignCompactRangeSliderHorizontal}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />

        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource MaterialDesignCompactRangeSliderVertical}" />
            </Trigger>
            
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToolTip}" x:Key="MaterialDesignCustomToolTip">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignToolTipBackground}" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="behaviours:ToolTipAssist.ForceCloseOnMouseLeave" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="2" Margin="{TemplateBinding Margin}">
                        <ContentPresenter x:Name="ContentPresenter"  
                                          Margin="{TemplateBinding Padding}"
                                          Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}">
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignCustomToolTip}" />
</ResourceDictionary>