<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes">
    <Style x:Key="MaterialDesignProgressToolBarButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:TransitionAssist.DisableTransitions" Value="True"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="material:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueLightForegroundBrush}"/>
        <Setter Property="material:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueLightBrush}"/>
        <Setter Property="material:ButtonProgressAssist.Opacity" Value=".4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border x:Name="border" Background="Transparent"/>
                                <ProgressBar x:Name="ProgressBar"
                                             Style="{DynamicResource MaterialDesignLinearProgressBar}"
                                             Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                             Height="{TemplateBinding Height}"
                                             HorizontalAlignment="Left"
                                             VerticalAlignment="Center"
                                             Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IndicatorBackground)}"
                                             Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IndicatorForeground)}"
                                             IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IsIndeterminate)}"
                                             Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Maximum)}"
                                             Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Minimum)}"
                                             Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Opacity)}"
                                             Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                             Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ButtonProgressAssist.Value)}"/>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple Padding="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         Focusable="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth"/>
                                    <Binding ElementName="border" Path="ActualHeight"/>
                                    <Binding ElementName="border" Path="CornerRadius"/>
                                    <Binding ElementName="border" Path="BorderThickness"/>
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarButton"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="MaterialDesignToolBarToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border x:Name="border" Background="Transparent"/>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple x:Name="ContentPresenter"
                                         Padding="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Content="{TemplateBinding Content}"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         Focusable="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth"/>
                                    <Binding ElementName="border" Path="ActualHeight"/>
                                    <Binding ElementName="border" Path="CornerRadius"/>
                                    <Binding ElementName="border" Path="BorderThickness"/>
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="material:ToggleButtonAssist.HasOnContent" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContent)}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContentTemplate)}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolBarRotatingToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
        <Setter Property="material:ShadowAssist.ShadowDepth" Value="Depth0"/>
        <Setter Property="material:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <AdornerDecorator>
                            <Grid>
                                <Border x:Name="border" Background="Transparent"/>
                            </Grid>
                        </AdornerDecorator>
                        <material:Ripple x:Name="ContentPresenter"
                                         Padding="{TemplateBinding Padding}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         Focusable="False"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <material:Ripple.Content>
                                <ContentControl Content="{TemplateBinding Content}" RenderTransformOrigin="0.5 0.5">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform x:Name="ExpandPathRotateTransform"/>
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </material:Ripple.Content>
                            <material:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth"/>
                                    <Binding ElementName="border" Path="ActualHeight"/>
                                    <Binding ElementName="border" Path="CornerRadius"/>
                                    <Binding ElementName="border" Path="BorderThickness"/>
                                </MultiBinding>
                            </material:Ripple.Clip>
                        </material:Ripple>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="material:ToggleButtonAssist.HasOnContent" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContent)}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(material:ToggleButtonAssist.OnContentTemplate)}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MaterialDesignFlatButtonClick}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>